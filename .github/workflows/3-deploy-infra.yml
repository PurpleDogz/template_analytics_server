name: 3-Deploy-Infrastructure

{% comment %} on:
  workflow_run:
    workflows: ["2-Build-Docker"]
    types:
      - completed {% endcomment %}

env:
  AWS_REGION: ap-southeast-2
  SERVICE_NAME: evandus-analytics
  
jobs:
  deploy:
    #runs-on: ubuntu-latest
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          backend-config: |
            bucket = "terraformbackendaccess"
            key    = "${{ env.SERVICE_NAME }}.tfstate"
            region = "${{ env.AWS_REGION }}"
          terraform_version: 1.4.2
      
      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init -input=false  
        env:
          TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  

      - name: Plan Terraform
        id: plan
        continue-on-error: true
        working-directory: ./terraform
        run: |
          terraform plan -input=false -no-color -out=tfplan \
          && terraform show -no-color tfplan  
        env:
          TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
  
      - name: Apply Terraform
        if: steps.plan.outcome == 'success'
        id: apply
        continue-on-error: true
        working-directory: ./terraform
        run: |
          terraform apply \
          -input=false \
          -no-color \
          tfplan
        env:
          TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  

      - name: Force new deployment
        run: |
          aws ecs update-service --cluster ${{ env.SERVICE_NAME }}-cluster --service ${{ env.SERVICE_NAME }}-service --force-new-deployment